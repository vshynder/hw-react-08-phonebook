{"version":3,"sources":["redux/actions.js","redux/operations/authOperations.js","components/UserMenu.js","redux/contacts-selectors.js","components/NavBar.js","components/PrivateRoute.js","components/PublicRoute.js","components/Filter.js","components/ContactForm.js","components/ContactList.js","components/Alert.js","components/Loading.js","redux/operations/contactsOperations.js","views/ContactsPageView.js","views/RegisterPageView.js","views/LoginPageView.js","App.js","redux/reducers/contactReducer.js","redux/reducers/filterReducer.js","redux/reducers/mountedReducer.js","redux/reducers/alertShownReducer.js","redux/reducers/alertMessageReducer.js","redux/reducers/authReducers.js","redux/reducers/index.js","index.js"],"names":["registerRequest","createAction","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logOutRequest","logOutSuccess","logOutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","filter","value","payload","toggleMounted","toggleAlertVisibility","toggleAlertMessage","token","axios","defaults","headers","common","Authorization","registerUser","userData","dispatch","actions","name","email","password","post","then","response","data","catch","error","loginUser","logOutUser","getCurrentUser","getState","persistedToken","user","get","connect","onExit","authOperations","onClick","state","isMounted","contacts","isAlertShown","alertMessage","isLoading","userName","selectors","props","className","to","isLoggedIn","Component","component","routeProps","render","restricted","Filter","id","onChange","filterChange","filterVal","ContactForm","number","handleChange","e","setState","target","handleSubmit","preventDefault","formSubmit","onSubmit","this","type","React","ContactListItem","contactId","remove","ContactList","useEffect","localStorage","setItem","JSON","stringify","TransitionGroup","map","contact","CSSTransition","key","timeout","classNames","toLowerCase","includes","Alert","isShown","info","in","style","display","Loader","baseURL","delete","onFormSubmit","operations","removeContact","handleFilter","handleAlertChange","message","handleAlertVisibility","loadContacts","handleAlert","setTimeout","mountOnEnter","trim","find","length","onRegister","cred","useState","setName","setEmail","setPassword","console","log","onLogin","App","onGetCurrentUser","NavBar","path","ContactsView","RegisterPageView","LoginPageView","exact","contactReducer","createReducer","action","el","loading","filterReducer","mountedReducer","alertShownReducer","alertMessageReducer","authReducer","persistConfig","storage","whitelist","persistedReducer","persistReducer","rootReducer","combineReducers","store","configureStore","reducer","persistor","persistStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.af4e6a2c.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n\nconst registerRequest = createAction(\"register/request\");\nconst registerSuccess = createAction(\"register/success\");\nconst registerError = createAction(\"register/error\");\n\nconst loginRequest = createAction(\"login/request\");\nconst loginSuccess = createAction(\"login/success\");\nconst loginError = createAction(\"login/error\");\n\nconst logOutRequest = createAction(\"logOut/request\");\nconst logOutSuccess = createAction(\"logOut/success\");\nconst logOutError = createAction(\"logOut/error\");\n\nconst getCurrentUserRequest = createAction(\"getCurrentUser/request\");\nconst getCurrentUserSuccess = createAction(\"getCurrentUser/success\");\nconst getCurrentUserError = createAction(\"getCurrentUser/error\");\n\nconst fetchContactsRequest = createAction(\"fetchContacts/request\");\nconst fetchContactsSuccess = createAction(\"fetchContacts/success\");\nconst fetchContactsError = createAction(\"fetchContacts/error\");\n\nconst addContactRequest = createAction(\"addContact/request\");\nconst addContactSuccess = createAction(\"addContact/success\");\nconst addContactError = createAction(\"addContact/error\");\n\nconst removeContactRequest = createAction(\"removeContact/request\");\nconst removeContactSuccess = createAction(\"removeContact/success\");\nconst removeContactError = createAction(\"removeContact/error\");\n\nconst filter = createAction(\"FILTER\", (value) => {\n  return {\n    payload: {\n      value,\n    },\n  };\n});\n\nconst toggleMounted = createAction(\"TOGGLE_MOUNTED\", (value) => {\n  return {\n    payload: {\n      value,\n    },\n  };\n});\nconst toggleAlertVisibility = createAction(\n  \"TOGGLE_ALERT_VISIBILITY\",\n  (value) => {\n    return {\n      payload: {\n        value,\n      },\n    };\n  }\n);\n\nconst toggleAlertMessage = createAction(\"TOGGLE_ALERT_MESSAGE\", (value) => {\n  return {\n    payload: {\n      value,\n    },\n  };\n});\n\nexport default {\n  registerRequest,\n  registerSuccess,\n  registerError,\n\n  loginRequest,\n  loginSuccess,\n  loginError,\n\n  logOutRequest,\n  logOutSuccess,\n  logOutError,\n\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError,\n\n  filter,\n  toggleMounted,\n  toggleAlertVisibility,\n  toggleAlertMessage,\n};\n","import actions from \"../actions\";\nimport axios from \"axios\";\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = \"\";\n  },\n};\n\nconst registerUser = (userData) => (dispatch) => {\n  dispatch(actions.registerRequest());\n\n  const { name, email, password } = userData;\n\n  axios\n    .post(\"/users/signup\", { name, email, password })\n    .then((response) => {\n      token.set(response.data.token);\n      dispatch(actions.registerSuccess(response.data));\n    })\n    .catch((error) => dispatch(actions.registerError(error)));\n};\n\nconst loginUser = (userData) => (dispatch) => {\n  dispatch(actions.loginRequest());\n\n  const { email, password } = userData;\n\n  axios\n    .post(\"/users/login\", { email, password })\n    .then((response) => {\n      token.set(response.data.token);\n      dispatch(actions.loginSuccess(response.data));\n    })\n    .catch((error) => dispatch(actions.loginError(error)));\n};\n\nconst logOutUser = () => (dispatch) => {\n  dispatch(actions.logOutRequest());\n\n  axios\n    .post(\"users/logout\")\n    .then((response) => {\n      token.unset();\n      dispatch(actions.logOutSuccess(response.data));\n    })\n    .catch((error) => dispatch(actions.logOutError(error)));\n};\n\nconst getCurrentUser = () => (dispatch, getState) => {\n  const {\n    user: { token: persistedToken },\n  } = getState();\n\n  if (!persistedToken) {\n    return;\n  }\n\n  token.set(persistedToken);\n  dispatch(actions.getCurrentUserRequest());\n\n  axios\n    .get(\"users/current\")\n    .then(({ data }) =>\n      dispatch(actions.getCurrentUserSuccess({ data, persistedToken }))\n    )\n    .catch((error) => dispatch(actions.getCurrentUserError(error)));\n};\n\nexport default {\n  registerUser,\n  loginUser,\n  logOutUser,\n  getCurrentUser,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport authOperations from \"../redux/operations/authOperations\";\n\nfunction UserMenu({ name, onExit }) {\n  return (\n    <div>\n      Hello {name}!<button onClick={onExit}>Exit</button>\n    </div>\n  );\n}\n\nexport default connect(null, { onExit: authOperations.logOutUser })(UserMenu);\n","const getIsMounted = (state) => state.isMounted;\nconst getContacts = (state) => state.contacts;\nconst getFilter = (state) => state.filter;\nconst getAlertShown = (state) => state.isAlertShown;\nconst getAlertMessage = (state) => state.alertMessage;\nconst getLoader = (state) => state.isLoading;\nconst getUserName = (state) => state.user.name;\n\nexport default {\n  getIsMounted,\n  getContacts,\n  getFilter,\n  getAlertShown,\n  getAlertMessage,\n  getLoader,\n  getUserName,\n};\n","import React from \"react\";\nimport UserMenu from \"./UserMenu\";\n\nimport { NavLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport selectors from \"../redux/contacts-selectors\";\n\nfunction Navbar(props) {\n  return (\n    <div className=\"navbar\">\n      <NavLink className=\"navbar__link\" to=\"/login\">\n        <span className=\"navbar__var\"> Login</span>\n      </NavLink>\n      <NavLink className=\"navbar__link\" to=\"/register\">\n        <span className=\"navbar__var\"> Register</span>\n      </NavLink>\n      <NavLink className=\"navbar__link\" to=\"/contacts\">\n        <span className=\"navbar__var\"> Contacts</span>\n      </NavLink>\n      ){props.userName && <UserMenu name={props.userName} />}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  userName: selectors.getUserName(state),\n});\n\nexport default connect(mapStateToProps)(Navbar);\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../redux/contacts-selectors\";\n\nconst PrivateRoute = ({ component: Component, isLoggedIn, ...routeProps }) => (\n  <Route\n    {...routeProps}\n    render={(props) => {\n      return isLoggedIn ? <Component {...props} /> : <Redirect to=\"/login\" />;\n    }}\n  />\n);\nconst mapStateToProps = (state) => ({\n  isLoggedIn: selectors.getUserName(state),\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../redux/contacts-selectors\";\n\nconst PublicRoute = ({\n  component: Component,\n  isLoggedIn,\n  restricted,\n  ...routeProps\n}) => (\n  <Route\n    {...routeProps}\n    render={(props) => {\n      return isLoggedIn && restricted ? (\n        <Redirect to=\"/contacts\" />\n      ) : (\n        <Component {...props} />\n      );\n    }}\n  />\n);\nconst mapStateToProps = (state) => ({\n  isLoggedIn: selectors.getUserName(state),\n});\n\nexport default connect(mapStateToProps)(PublicRoute);\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nconst Filter = (props) => {\n  return (\n    <div className=\"filter\">\n      <p className=\"filter__title\">Find contacts by name</p>\n      <input\n        className=\"filter__input\"\n        id=\"filter\"\n        onChange={props.filterChange}\n        value={props.filterVal}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filterChange: PropTypes.func,\n  filterVal: PropTypes.string,\n};\n\nexport default Filter;\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nclass ContactForm extends React.Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.formSubmit(this.state);\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"form__name\">\n          Name\n          <input\n            className=\"form__name--input\"\n            id=\"name\"\n            onChange={this.handleChange}\n            type=\"text\"\n            value={this.state.name}\n          />\n        </label>\n        <label className=\"form__number\">\n          Number\n          <input\n            className=\"form__number--input\"\n            id=\"number\"\n            onChange={this.handleChange}\n            type=\"text\"\n            value={this.state.number}\n          />\n        </label>\n        <button className=\"form__submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  formSubmit: PropTypes.func,\n};\n","import React, { useEffect } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport PropTypes from \"prop-types\";\n\nconst LS_KEY = \"react-hw-3\";\n\nconst ContactList = (props) => {\n  useEffect(() => {\n    localStorage.setItem(LS_KEY, JSON.stringify(props.contacts));\n  }, [props.contacts]);\n\n  return (\n    <TransitionGroup component=\"ul\" className=\"contact-list\">\n      {props.filter === \"\"\n        ? props.contacts.map((contact) => (\n            <CSSTransition\n              key={contact.id}\n              timeout={250}\n              classNames=\"contact-list__item\"\n            >\n              <ContactListItem\n                contactId={contact.id}\n                name={contact.name}\n                number={contact.number}\n                remove={props.remove}\n              />\n            </CSSTransition>\n          ))\n        : props.contacts\n            .filter((contact) =>\n              contact.name.toLowerCase().includes(props.filter.toLowerCase())\n            )\n            .map((contact) => (\n              <CSSTransition\n                key={contact.id}\n                timeout={250}\n                classNames=\"contact-list__item\"\n              >\n                <ContactListItem\n                  key={contact.id}\n                  contactId={contact.id}\n                  name={contact.name}\n                  number={contact.number}\n                  remove={props.remove}\n                />\n              </CSSTransition>\n            ))}\n    </TransitionGroup>\n  );\n};\n\nconst ContactListItem = ({ contactId, name, number, remove }) => (\n  <li className=\"contact-list__item\">\n    <div className=\"contact-list__item--cont\">\n      <span className=\"contact-list__item--span\">{name}</span>\n      <span className=\"contact-list__item--span\">{number}</span>\n    </div>\n\n    <button\n      className=\"contact-list__remove\"\n      onClick={() => {\n        remove(contactId);\n      }}\n    ></button>\n  </li>\n);\n\nexport default ContactList;\n\nContactList.propTypes = {\n  filter: PropTypes.string,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n  remove: PropTypes.func,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { CSSTransition } from \"react-transition-group\";\n\nconst Alert = ({ isShown, info }) => {\n  return (\n    <CSSTransition\n      timeout={250}\n      classNames=\"alert\"\n      in={isShown}\n      style={{ display: isShown ? \"block\" : \"none\" }}\n    >\n      <div className=\"alert\">{info}</div>\n    </CSSTransition>\n  );\n};\n\nexport default Alert;\n\nAlert.propTypes = {\n  isShown: PropTypes.bool,\n  info: PropTypes.string,\n};\n","import React from \"react\";\n\nexport default function Loader() {\n  return <div>Loading contacts...</div>;\n}\n","import actions from \"../actions\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = \"https://goit-phonebook-api.herokuapp.com\";\n\nconst fetchContacts = () => (dispatch) => {\n  dispatch(actions.fetchContactsRequest());\n\n  axios\n    .get(\"/contacts\")\n    .then((response) => {\n      dispatch(actions.fetchContactsSuccess(response.data));\n    })\n    .catch((error) => dispatch(actions.fetchContactsError(error)));\n};\n\nconst addContact = (contact) => (dispatch) => {\n  dispatch(actions.addContactRequest());\n\n  axios\n    .post(\"/contacts\", contact)\n    .then((response) => dispatch(actions.addContactSuccess(response.data)))\n    .catch((error) => dispatch(actions.addContactError(error)));\n};\n\nconst removeContact = (id) => (dispatch) => {\n  dispatch(actions.removeContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then((response) => dispatch(actions.removeContactSuccess(id)))\n    .catch((error) => dispatch(actions.removeContactError(error)));\n};\n\nexport default {\n  fetchContacts,\n  addContact,\n  removeContact,\n};\n","import React, { useEffect } from \"react\";\nimport Filter from \"../components/Filter\";\nimport ContactForm from \"../components/ContactForm\";\nimport ContactList from \"../components/ContactList\";\nimport Alert from \"../components/Alert\";\nimport Loader from \"../components/Loading\";\n\nimport { CSSTransition } from \"react-transition-group\";\n\nimport { connect } from \"react-redux\";\n\nimport operations from \"../redux/operations/contactsOperations\";\nimport selectors from \"../redux/contacts-selectors\";\nimport actions from \"../redux/actions\";\n\nconst Contacts = (props) => {\n  useEffect(() => {\n    props.loadContacts();\n    // eslint-disable-next-line\n  }, []);\n\n  const handleSubmit = ({ name, number }) => {\n    if (name.trim() === \"\" || number.trim() === \"\") {\n      handleAlert(\"Name and number must be provided.\");\n      return;\n    }\n    const check = props.contacts.find((contact) => contact.name === name);\n    check\n      ? handleAlert(\"You already have \" + name)\n      : props.onFormSubmit(name, number);\n  };\n\n  const handleAlert = (message) => {\n    props.handleAlertChange(message);\n    props.handleAlertVisibility(true);\n    setTimeout(() => {\n      props.handleAlertVisibility(false);\n    }, 3000);\n  };\n\n  return (\n    <div className=\"phonebook\">\n      <CSSTransition\n        in={props.isMounted}\n        timeout={500}\n        classNames=\"title\"\n        mountOnEnter\n      >\n        <h2 className=\"title\">Phonebook</h2>\n      </CSSTransition>\n      <ContactForm formSubmit={handleSubmit} />\n      {props.contacts.length > 1 ? (\n        <Filter filterChange={props.handleFilter} filterVal={props.filter} />\n      ) : null}\n\n      {props.isLoading && <Loader />}\n      <ContactList\n        filter={props.filter}\n        contacts={props.contacts}\n        remove={props.removeContact}\n      />\n      <Alert isShown={props.isAlertShown} info={props.alertMessage} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  isMounted: selectors.getIsMounted(state),\n  contacts: selectors.getContacts(state),\n  filter: selectors.getFilter(state),\n  isAlertShown: selectors.getAlertShown(state),\n  alertMessage: selectors.getAlertMessage(state),\n  isLoading: selectors.getLoader(state),\n  userName: selectors.getUserName(state),\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onFormSubmit: (name, number) =>\n      dispatch(operations.addContact({ name, number })),\n    removeContact: (id) => dispatch(operations.removeContact(id)),\n    toggleMounted: (value) => dispatch(actions.toggleMounted(value)),\n    handleFilter: (e) => dispatch(actions.filter(e.target.value)),\n    handleAlertChange: (message) =>\n      dispatch(actions.toggleAlertMessage(message)),\n    handleAlertVisibility: (value) =>\n      dispatch(actions.toggleAlertVisibility(value)),\n    loadContacts: () => dispatch(operations.fetchContacts()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport authOperations from \"../redux/operations/authOperations\";\n\nfunction RegisterPage(props) {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(name, email, password);\n    props.onRegister({ name, email, password });\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Login:\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        ></input>\n      </label>\n      <label>\n        Email:\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        ></input>\n      </label>\n      <label>\n        Password:\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        ></input>\n      </label>\n      <button type=\"submit\">Register</button>\n    </form>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  onRegister: (cred) => dispatch(authOperations.registerUser(cred)),\n});\n\nexport default connect(null, mapDispatchToProps)(RegisterPage);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport authOperations from \"../redux/operations/authOperations\";\n\nfunction LoginPage(props) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    props.onLogin({ email, password });\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Email:\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        ></input>\n      </label>\n      <label>\n        Password:\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        ></input>\n      </label>\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  onLogin: (cred) => dispatch(authOperations.loginUser(cred)),\n});\n\nexport default connect(null, mapDispatchToProps)(LoginPage);\n","import React from \"react\";\n\nimport NavBar from \"./components/NavBar\";\n\nimport { BrowserRouter, Switch, Redirect, Route } from \"react-router-dom\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport PublicRoute from \"./components/PublicRoute\";\n\nimport { connect } from \"react-redux\";\nimport operations from \"./redux/operations/authOperations\";\n\nimport ContactsView from \"./views/ContactsPageView\";\nimport RegisterPageView from \"./views/RegisterPageView\";\nimport LoginPageView from \"./views/LoginPageView\";\n\nimport \"./app.scss\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.onGetCurrentUser();\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <NavBar />\n        <Switch>\n          <PrivateRoute path=\"/contacts\" component={ContactsView} />\n          <PublicRoute\n            restricted={true}\n            path=\"/register\"\n            component={RegisterPageView}\n          />\n          <PublicRoute\n            restricted={true}\n            path=\"/login\"\n            component={LoginPageView}\n          />\n          <Route path=\"/\" exact>\n            <Redirect to=\"/login\" />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  onGetCurrentUser: () => dispatch(operations.getCurrentUser()),\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport actions from \"../actions\";\n\nexport const contactReducer = createReducer([], {\n  [actions.fetchContactsSuccess]: (state, action) => action.payload,\n\n  [actions.addContactSuccess]: (state, action) => [...state, action.payload],\n\n  [actions.removeContactSuccess]: (state, action) =>\n    state.filter((el) => el.id !== action.payload),\n});\n\nexport const loading = createReducer(false, {\n  [actions.fetchContactsRequest]: () => true,\n  [actions.fetchContactsSuccess]: () => false,\n  [actions.fetchContactsError]: () => false,\n});\n","import actions from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const filterReducer = createReducer(\"\", {\n  [actions.filter]: (state, action) => action.payload.value,\n});\n","import actions from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const mountedReducer = createReducer(false, {\n  [actions.toggleMounted]: (state, action) => action.payload.value,\n});\n","import actions from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const alertShownReducer = createReducer(false, {\n  [actions.toggleAlertVisibility]: (state, action) => action.payload.value,\n});\n","import actions from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nexport const alertMessageReducer = createReducer(\"\", {\n  [actions.toggleAlertMessage]: (state, action) => action.payload.value,\n});\n","import actions from \"../actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nconst initialState = { name: null, email: null, token: null };\n\nexport const authReducer = createReducer(initialState, {\n  [actions.registerSuccess]: (state, action) => ({\n    name: action.payload.user.name,\n    email: action.payload.user.email,\n    token: action.payload.token,\n  }),\n  [actions.loginSuccess]: (state, action) => ({\n    name: action.payload.user.name,\n    email: action.payload.user.email,\n    token: action.payload.token,\n  }),\n  [actions.logOutSuccess]: () => ({ name: null, email: null, token: null }),\n  [actions.getCurrentUserSuccess]: (state, action) => ({\n    name: action.payload.data.name,\n    email: action.payload.data.email,\n    token: action.payload.persistedToken,\n  }),\n});\n","import { combineReducers } from \"redux\";\n\nimport { contactReducer, loading } from \"./contactReducer\";\nimport { filterReducer } from \"./filterReducer\";\nimport { mountedReducer } from \"./mountedReducer\";\nimport { alertShownReducer } from \"./alertShownReducer\";\nimport { alertMessageReducer } from \"./alertMessageReducer\";\nimport { authReducer } from \"./authReducers\";\n\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst persistConfig = {\n  key: \"user\",\n  storage,\n  whitelist: [\"token\"],\n};\n\nconst persistedReducer = persistReducer(persistConfig, authReducer);\n\nconst rootReducer = combineReducers({\n  contacts: contactReducer,\n  filter: filterReducer,\n  isMounted: mountedReducer,\n  isAlertShown: alertShownReducer,\n  alertMessage: alertMessageReducer,\n  isLoading: loading,\n  user: persistedReducer,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./redux/reducers\";\nimport { Provider } from \"react-redux\";\n\nimport { persistStore } from \"redux-persist\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nconst persistor = persistStore(store);\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nexport { store };\n"],"sourceRoot":""}